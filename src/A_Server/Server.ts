import express, {Request, Response} from "express";
import {BankAccount} from "../Classes/BankAccount";
import {Account} from "../Classes/Account";
import {Person} from "../Classes/Person";
import {Stock} from "../Classes/Stock";
import {StockSymbol} from "../Enums/StockSymbol";
import {TradingCompany} from "../Classes/TradingCompany";
import {Portfolio} from "../Classes/Portfolio";
import cors from "cors";
import {StockData} from "../client/src/app/types/stockdata-type";
import connectToDatabase from "./Database";
import ClientModel from "./Models/ClientModel";
import StockModel from "./Models/StockModel";
import mongoose from "mongoose";
import { ObjectId } from 'mongoose';  // Import ObjectId from mongoose

const app = express();
const port = 3000;
const API = '/api';

app.use(cors());

app.use(express.json());


connectToDatabase();


app.get('/', (req: Request, res: Response) => {
    res.send("Hello, this is Marek's website 🚀!");
});

// ----------------------------------------------------------------------

const clients = new TradingCompany()

// GET - dones zoznam klientov
app.get(`${API}/clients`, async (req: Request, res: Response) => {
    try {
        const allClients = await ClientModel.find(); // Fetch all clients from MongoDB
        const clientsList = allClients.map(client => ({
            name: client.name,
            email: client.email,
            iban: client.iban,
            bankAccountBalance: client.bankAccountBalance,
            investmentAccountBalance: client.investmentAccountBalance,
        }));
        res.status(200).json(clientsList); // Return the data in the expected format
    } catch (error) {
        res.status(500).json({ error: "Failed to fetch clients" });
    }
});

// POST - vytvor noveho clienta
app.post(`${API}/clients`, async (req: Request, res: Response) => {
    if (req.body.name === undefined || req.body.email === undefined) {
        res.status(409);
        res.json({ error: 'Missing required fields' });
        return;
    }

    try {
        // Check if a client with the same email already exists in MongoDB
        const existingClient = await ClientModel.findOne({ email: req.body.email });
        if (existingClient) {
            res.status(409).json({ error: "Email already exists" });
            return;
        }

        // Use backend logic
        const bankAccount = new BankAccount(req.body.bankAccountBalance || 0);
        const investmentAccount = new Account(req.body.investmentAccountBalance || 0, bankAccount);
        const person = new Person(req.body.name, req.body.email, bankAccount, investmentAccount);

        // Save the client to MongoDB
        const newClient = new ClientModel({
            name: person.getName(),
            email: person.getEmail(),
            iban: person.getBankAccount().iban, // Generated by BankAccount class
            bankAccountBalance: person.getBankAccount().getBalance(),
            investmentAccountBalance: person.getInvestmentAccount().getBalance(),
        });

        const savedClient = await newClient.save();

        res.status(201).json({
            name: savedClient.name,
            email: savedClient.email,
            iban: savedClient.iban,
            bankAccountBalance: savedClient.bankAccountBalance,
            investmentAccountBalance: savedClient.investmentAccountBalance,
        });
    } catch (error) {
        console.error("Error saving client:", error);
        res.status(500).json({ error: "Failed to create client" });
    }
});

// GET - dones konkretneho klienta na zaklade emailu
app.get(`${API}/clients/:email`, async (req: Request, res: Response) => {
    const email = String(req.params.email);

    if (!email) {
        res.status(400).json({ error: "Invalid email" });
        return;
    }

    try {
        const clientData = await ClientModel.findOne({ email });

        if (!clientData) {
            res.status(404).json({ error: "Client not found" });
            return;
        }

        res.json({
            name: clientData.name,
            email: clientData.email,
            bankAccountBalance: clientData.bankAccountBalance,
            investmentAccountBalance: clientData.investmentAccountBalance,
        });
    } catch (error) {
        console.error("Error fetching client:", error);
        res.status(500).json({ error: "Failed to fetch client" });
    }
});

// DELETE - vymaz klienta na zaklade emailu
app.delete(`${API}/clients/:email`, async (req: Request, res: Response) => {
    const email = String(req.params.email);
    if (!String(email)) {
        res.status(409);
        res.json({ error: 'Invalid email' });
        return;
    }
    try {
        const clientData = await ClientModel.findOne({ email });

        if (!clientData) {
            res.status(404).json({ error: "Client not found" });
            return;
        }

        await ClientModel.deleteOne({ email });

        res.json({ message: "Client GONE" });
    } catch (error) {
        console.error("Error deleting client:", error);
        res.status(500).json({ error: "Failed to delete client" });
    }
});

// PUT - UPDATE klienta podla emailu
app.put(`${API}/clients/:email`, async (req: Request, res: Response) => {
    const email = String(req.params.email);
    const updatedName = req.body.name;

    // Validate the email parameter
    if (!email) {
        res.status(400).json({ error: "Invalid email" });
        return;
    }

    // Validate the name field (required if provided)
    if (!updatedName) {
        res.status(400).json({ error: "Name is required to update" });
        return;
    }

    try {
        // Find the client by email in MongoDB
        const clientData = await ClientModel.findOne({ email });

        // Check if the client exists
        if (!clientData) {
            res.status(404).json({ error: "Client not found" });
            return;
        }

        // Update the name field
        clientData.name = updatedName;

        // Save the updated client in MongoDB
        const updatedClient = await clientData.save();

        // Return the updated client details
        res.json({
            name: updatedClient.name,
            email: updatedClient.email,
            bankAccountBalance: updatedClient.bankAccountBalance,
            investmentAccountBalance: updatedClient.investmentAccountBalance,
        });
    } catch (error) {
        console.error("Error updating client:", error);
        res.status(500).json({ error: "Failed to update client" });
    }
});

// . . .


// POST - investovanie do akcie
app.post(`${API}/clients/:email/invest`, async (req: Request, res: Response) => {
    const email = req.params.email;
    const { stockSymbol, currency, stockPrice, dividendYield, volatility, expectedReturn, amount } = req.body;

    if (!stockSymbol || typeof amount !== 'number' || amount <= 0) {
        res.status(409).json({ error: 'Invalid stock symbol or amount' });
        return;
    }

    try {
        const clientData = await ClientModel.findOne({ email });

        if (!clientData) {
            res.status(404).json({ error: 'ClientData not found' });
            return;
        }

        // Instantiate BankAccount and Account classes based on MongoDB data
        const bankAccount = new BankAccount(clientData.bankAccountBalance);
        const investmentAccount = new Account(clientData.investmentAccountBalance, bankAccount);

        // Create an instance of Person class using the fetched data
        const client = new Person(
            clientData.name,
            clientData.email,
            bankAccount,
            investmentAccount
        );

        // Create a new Stock document
        const stockDB = new StockModel({
            symbol: stockSymbol,
            stockPrice,
            totalShares: Math.floor(amount / stockPrice)
        });

        // Save the stock document to MongoDB
        await stockDB.save();

        const stock = new Stock(stockSymbol, currency, stockPrice, dividendYield, volatility, expectedReturn);

        const { success, leftover } = client.getInvestmentAccount().investInStock(stock, amount);

        if (success) {

            clientData.investmentAccountBalance = client.getInvestmentAccount().getBalance();

            // Add the stock ObjectId to the client's stocks array
            clientData.stocks.push(stockDB);

            await clientData.save();

            res.json({
                message: `Invested ${amount - leftover} (${leftover} was unused) in shares of ${stockSymbol}`,
                balance: clientData.investmentAccountBalance,
                leftover: leftover.toFixed(2),
                stock: {
                    symbol: stockSymbol,
                    shares: stock.totalShares,
                    stockPrice: stock.stockPrice,
                },
            });
        } else {
            res.status(400).json({
                error: 'Investment failed: Insufficient balance or unable to buy shares',
                leftover: clientData.investmentAccountBalance.toFixed(2),
            });
        }
    } catch (error) {
        console.error('Error processing investment:', error);
        res.status(500).json({ error: 'Failed to process investment' });
    }
});

// POST - vytiahnutie penazi z akcie
app.post(`${API}/clients/:email/sell`, async (req: Request, res: Response) => {
    const email: string = req.params.email;
    const { stockSymbol, sharesToSell } = req.body;

    if (!stockSymbol || typeof sharesToSell !== 'number' || sharesToSell <= 0) {
        res.status(400).json({ error: 'Invalid input: Provide stockSymbol and positive number of sharesToSell' });
        return;
    }

    try {
        const clientData = await ClientModel.findOne({ email });

        if (!clientData) {
            res.status(404).json({ error: 'Client not found' });
            return;
        }

        const bankAccount = new BankAccount(clientData.bankAccountBalance);
        const investmentAccount = new Account(clientData.investmentAccountBalance, bankAccount);

        const client = new Person(
            clientData.name,
            clientData.email,
            bankAccount,
            investmentAccount
        );

        const investedStock = investmentAccount.getStocks().find(s => s.name === stockSymbol);

        if (!investedStock) {
            res.status(404).json({ error: `Stock ${stockSymbol} not found in portfolio` });
            return;
        }

        const amountToWithdraw = sharesToSell * investedStock.stockPrice;

        const result = investmentAccount.withdrawFromStock(investedStock, amountToWithdraw);

        if (!result.success) {
            res.status(400).json({ error: result.message });
            return;
        }

        clientData.investmentAccountBalance = client.getInvestmentAccount().getBalance();
        await clientData.save();

        res.json({
            message: `Sold ${sharesToSell} shares of ${stockSymbol}`,
            balance: clientData.investmentAccountBalance.toFixed(2),
            stock: {
                symbol: stockSymbol,
                remainingShares: investedStock.totalShares,
                stockPrice: investedStock.stockPrice
            }
        });

    } catch (error) {
        console.error('Error processing stock sale:', error);
        res.status(500).json({ error: 'Failed to process stock sale' });
    }
});


// POST - simulovanie portfolia s akciami pocas mesiacov
app.post(`${API}/portfolio`, (req: Request, res: Response): void => {
    const { stocks, months, showInfo } = req.body;

    // kontrola vstupov
    if (!Array.isArray(stocks) || typeof months !== 'number' || months <= 0) {
        res.status(400).json({ error: 'Invalid input: stocks should be an array and months should be a positive number' });
        return;
    }
    const portfolio = new Portfolio();

    // pridanie akcii do portfolia
    stocks.forEach((stockData: StockData) => {
        const stock = new Stock(
            stockData.stockSymbol as StockSymbol,
            stockData.currency,
            stockData.stockPrice,
            stockData.dividendYield,
            stockData.volatility,
            stockData.expectedReturn,
            stockData.totalShares
        );

        portfolio.addStock(stock);
    });

    // nastavenie konzolovych vypisov do pola simulationResults
    let simulationResults: any[] = [];
    console.log(portfolio);

    const originalConsoleLog = console.log;

    console.log = (output) => {
        simulationResults.push(output);
        originalConsoleLog(output);
    };

    portfolio.simulateMonths(months, showInfo);

    if (!showInfo) { // ak nechceme cely vypis
        simulationResults = []; // zmazanie logov novym prazdnym polom
    }

    portfolio.showFinalBalance();

    res.json({
        message: `Simulated portfolio over ${months} months`,
        details: simulationResults,
    });
});

// GET - zoznam akcii klientov
app.get(`${API}/client/stocks`, (req: Request, res: Response) => {

    const allClients = clients.getAllClients();
    const stocksData = allClients.map(client => {
        return client.getInvestmentAccount().getStocks().map(stock => ({
            email: client.getEmail(),
            stockSymbol: stock.name,
            shares: stock.totalShares,
        }));
    });

    // danie vnorených polí do jedného poľa
    const flattenedData = stocksData.flat();

    if (flattenedData.length === 0) {
        res.json([]); // vrati prazdne pole ak nie su ziadne akcie
        return
    }

    res.json(flattenedData);
});

//. . .

// POST - deposit penazi na bankový účet
app.post(`${API}/clients/:iban/bank/deposit`, async (req: Request, res: Response) => {
    const iban = req.params.iban;
    const { amount } = req.body;

    // Validate the deposit amount
    if (!amount || amount <= 0) {
        res.status(400).json({ error: 'Invalid deposit amount' });
        return;
    }

    try {
        const client = await ClientModel.findOne({ iban });

        if (!client) {
            res.status(404).json({ error: 'Client not found' });
            return;
        }

        client.bankAccountBalance += amount;

        const updatedClient = await client.save();

        res.json({
            message: `Deposited ${amount.toFixed(2)} successfully`,
            bankAccountBalance: updatedClient.bankAccountBalance,
        });
    } catch (error) {
        console.error('Error during deposit:', error);
        res.status(500).json({ error: 'Failed to process deposit' });
    }
});

// POST - vytiahnutie penazi z bankového účtu
app.post(`${API}/clients/:iban/bank/withdraw`, async (req: Request, res: Response) => {
    const iban = req.params.iban;
    const { amount } = req.body;

    if (!amount || amount <= 0) {
        res.status(400).json({ error: 'Invalid withdrawal amount' });
        return;
    }

    try {
        const client = await ClientModel.findOne({ iban });

        if (!client) {
            res.status(404).json({ error: 'Client not found' });
            return;
        }

        // Check if there are sufficient funds
        if (client.bankAccountBalance < amount) {
             res.status(400).json({
                error: 'Insufficient funds',
                bankAccountBalance: client.bankAccountBalance,});
            return;
        }

        client.bankAccountBalance -= amount;

        const updatedClient = await client.save();

        res.json({
            message: `Withdrawn ${amount.toFixed(2)} successfully`,
            bankAccountBalance: updatedClient.bankAccountBalance,
        });
    } catch (error) {
        console.error('Error processing withdrawal:', error);
        res.status(500).json({ error: 'Failed to process withdrawal' });
    }
});

// POST - deposit penazi na investičný účet
app.post(`${API}/clients/:iban/investment/deposit`, async (req: Request, res: Response) => {
    const iban = req.params.iban;
    const { amount } = req.body;

    if (!amount || amount <= 0) {
        res.status(400).json({ error: 'Invalid deposit amount' });
        return;
    }

    try {
        const client = await ClientModel.findOne({ iban });

        if (!client) {
            res.status(404).json({ error: 'Client not found' });
            return;
        }

        client.investmentAccountBalance += amount;
        client.bankAccountBalance -= amount;

        const updatedClient = await client.save();

        res.json({
            message: `Deposited ${amount.toFixed(2)} successfully to investment account`,
            investmentAccountBalance: updatedClient.investmentAccountBalance,
        });
    } catch (error) {
        console.error('Error processing investment deposit:', error);
        res.status(500).json({ error: 'Failed to process investment deposit' });
    }
});

// POST - vytiahnutie penazi z investičného účtu
app.post(`${API}/clients/:iban/investment/withdraw`, async (req: Request, res: Response) => {
    const iban = req.params.iban;
    const { amount } = req.body;

    if (!amount || amount <= 0) {
        res.status(400).json({ error: 'Invalid withdrawal amount' });
        return;
    }

    try {
        const client = await ClientModel.findOne({ iban });

        if (!client) {
            res.status(404).json({ error: 'Client not found' });
            return;
        }

        if (client.investmentAccountBalance < amount) {
            res.status(400).json({
                error: 'Insufficient funds',
                investmentAccountBalance: client.investmentAccountBalance,});
            return;
        }

        client.investmentAccountBalance -= amount;
        client.bankAccountBalance += amount;


        const updatedClient = await client.save();

        res.json({
            message: `Withdrawn ${amount.toFixed(2)} successfully from investment account`,
            investmentAccountBalance: updatedClient.investmentAccountBalance,
        });
    } catch (error) {
        console.error('Error processing investment withdrawal:', error);
        res.status(500).json({ error: 'Failed to process investment withdrawal' });
    }
});

// . . .

// GET - kontrola existencie klienta podla emailu pre stranku s nakupom akcii
app.get(`${API}/clients/exists/:email`, async (req: Request, res: Response) => {
    const email = req.params.email;

    try {
        // Check if the client exists in the database by email
        const client = await ClientModel.findOne({ email });

        // If client is found, return true, else return false
        res.json({ exists: client !== null });
    } catch (error) {
        console.error('Error checking client existence:', error);
        res.status(500).json({ error: 'Failed to check client existence' });
    }
});

// GET - ziskanie historie investovania klienta - akcie
app.get(`${API}/clients/:email/investment/history`, (req: Request, res: Response) => {
    const email = req.params.email;

    const client = clients.getAllClients().find(client => client.getEmail() === email);

    if (!client) {
        res.status(404).json({ error: 'Client not found' });
        return
    }

    const history = client.getInvestmentAccount().getInvestmentHistory();

    if (!history.length) {
        res.status(200).json({ message: 'No transaction history found', history: [] });
        return
    }

    res.status(200).json({
        history
    });
});

app.listen(port, () => {
    console.log(`Server is WORKING at http://localhost:${port}/`);
});